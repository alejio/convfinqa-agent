[project]
name = "hiring-confinqa"
version = "0.1.0"
description = "ConfinQA assignment data processing and assessment"
readme = "README.md"
requires-python = "==3.12.*"
dependencies = [
  "typer==0.12.0",
  "click==8.1.7",
  "python-dotenv>=0.9.9",
  "pandas>=2.2.3",
  "pydantic>=2.11.4",
  "ruff>=0.11.10",
  "mypy>=1.15.0",
  "pylit>=0.8.0",
  "rich>=13.0.0",
  "pre-commit>=3.0.0",
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "openai>=1.0.0",
  "smolagents>=1.20.0",
  "litellm>=1.0.0",
  "pytest-mock>=3.14.1",
  "deepeval>=3.3.0",
  "dspy-ai>=2.5.4",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project.scripts]
main = "src.cli.main:app"


[tool.ruff]
fix = true
unsafe-fixes = false

[tool.ruff.lint]
select = [
    "F",  # default Ruff rules
    "E",  # pycodestyle Errors
    "W",  # pycodestyle Warnings
    "I",  # import sorting
    "UP", # modern syntax updates
    "B",  # flake8 common pitfalls & best practices
    "Q",  # flake8 consistent quotes
    "N",  # naming conventions,
]

ignore = [
    "B008",
    "D413",
    "E501",
    "W293",
    "W291",
    "PLR2004",
    "D101",
    "D400",

]

fixable = ["ALL"]

extend-select = [
    "PLR2004",
    "D101",
    "D102",
    "D103",
    "D201",
    "D202",
    "D215",
    "T201",
]

[tool.mypy]
disallow_any_generics = true
disallow_untyped_defs = true
disallow_untyped_globals = true
ignore_missing_imports = true
show_error_codes = true
strict = false
warn_return_any = true
plugins = ['pydantic.mypy']
packages = ["src"]
exclude = ["tests"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unittest: Fast unit tests that don't require external dependencies",
    "integration: Integration tests that may require external resources",
    "evaluation: Evaluation tests that require LLM API calls",
    "slow: Slow-running tests",
    "end2end: End-to-end tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "**/__pycache__/*"]
